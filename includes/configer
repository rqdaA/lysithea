#!/bin/bash
[ -n "$H_GUARD_CONFIGER" ] && return
readonly H_GUARD_CONFIGER=1

CONFIGFILE=".lysithea.conf"

source "$(realpath $(dirname $0))/includes/errors"
source "$(realpath $(dirname $0))/includes/utils"

function init_config() {
  if ! [ -f "$CONFIGFILE" ]; then
    printf "[+] creating lysithea config file: %s\n" "$CONFIGFILE"
    echo >"$CONFIGFILE" "### lysithea configuration file ###"
  fi
}

function find_config() {
  if [ $# -ne 1 ]; then
    return 1 # invalid args
  fi
  if ! [ -f "$CONFIGFILE" ]; then
    return 2 # config file not found
  fi

  while IFS= read -r cline; do
    if ! [[ $cline == "#"* ]]; then
      local config_name config_value
      config_name=$(cut -d '=' -f 1 <<<$cline)
      config_value=$(cut -d '=' -f 2 <<<$cline)
      if [ -z $config_name ] || [ -z $config_value ]; then
        continue # just skip invalid line
      fi

      if [ "$1" = "$config_name" ]; then
        echo $config_value
        break
      fi
    fi
  done <"$CONFIGFILE"

  return 0
}

function set_all_configs() {
  if ! [ -f "$CONFIGFILE" ]; then
    echo "[-] config file not found."
    return 0
  fi

  while IFS= read -r cline; do
    if ! [[ $cline == "#"* ]]; then
      local config_name config_value
      config_name=$(cut -d '=' -f 1 <<<$cline)
      config_value=$(cut -d '=' -f 2 <<<$cline)
      if [ -z $config_name ] || [ -z $config_value ]; then
        "[-] invalid config line: %s" >&2 $cline
        return 3 # invalid line
      fi

      printf -v "$config_name" "%s" "$config_value"
    fi
  done <"$CONFIGFILE"

  return 0
}

function read_config() {
  if [ $# -ne 1 ]; then
    _error_exit "$INVALID_ARGS" "read_config() is called with invalid # of args."
  fi

  local tmpvalue
  tmpvalue=$(find_config $1)
  if [ $? -ne 0 ]; then
    _error_exit "$OPERATION_FAILED" "error while reading configuration file: %s" "$CONFIGFILE"
  fi
  if [ -z "$tmpvalue" ]; then
    return 0 # not found
  fi
  printf -v "$1" "%s" "$tmpvalue"
}

function write_config() {
  if [ $# -ne 2 ]; then
    return 1
  fi

  init_config

  existing_one=$(find_config "$1") || return $?
  if [ -n "$existing_one" ]; then
    vecho "[.] overwriting exising config line."
    existing_one=$(printf '%s\n' "$existing_one" | sed -e 's/[\/&]/\\&/g')
    new_one=$(printf '%s\n' "$2" | sed -e 's/[\/&]/\\&/g')
    sed -i "s/$1=$existing_one/$1=$new_one/" $CONFIGFILE || return 1
  else
    echo >>$CONFIGFILE "$1=$2"
  fi

  return 0
}

function _do_configure_interactive() {
  echo ""
  echo "[+] choose below command to flip current setting, or set options by 'OPTION_NAME=OPTION_VALUE'."
  echo "  nobuild             : skip build of exploit and compression of filesystem defaultly."
  echo "  nolog               : don't take log of local exploit history defaultly."
  echo "  plain               : don't compile or copy additional files."
  echo "  exploit=<string>    : specify exploit filename."
  echo "  rootfs=<string>     : specify rootfs filename."
  echo "  qemu=<string>       : specify qemuscript filename."
  echo "  include=<string>    : libraries to include in the exploit binary. (\"-lXXX -lYYY\" format)"
  echo "  assets add <string> : assets to include in the compressed filesystem. (\"<file>:<path_to_copy>\" format)"

  read -r -p " ('q' to quit) > " userinput
  case "$userinput" in
  nolog)
    local target_config="EXPLOIT_DONT_LOG"
    read_config "$target_config"
    if [ -n "$_EXPLOIT_DONT_LOG" ] && [ "$_EXPLOIT_DONT_LOG" -eq 1 ]; then
      write_config "$target_config" 0
      echo "[+] set $target_config to 0."
    else
      write_config "$target_config" 1
      echo "[+] set $target_config to 1."
    fi
    ;;
  nobuild)
    local target_config="EXPLOIT_SKIP_BUILD"
    read_config "$target_config"
    if [ -n "$EXPLOIT_SKIP_BUILD" ] && [ "$EXPLOIT_SKIP_BUILD" -eq 1 ]; then
      write_config "$target_config" 0
      echo "[+] set $target_config to 0."
    else
      write_config "$target_config" 1
      echo "[+] set $target_config to 1."
    fi
    ;;
  plain)
    local target_config="PLAIN_WORK"
    read_config "$target_config"
    if [ -n "$PLAIN_WORK" ] && [ "$PLAIN_WORK" -eq 1 ]; then
      write_config "$target_config" 0
      echo "[+] set $target_config to 0."
    else
      write_config "$target_config" 1
      echo "[+] set $target_config to 1."
    fi
    ;;
  exploit=*)
    local target_config="EXPLOIT"
    local exploit_name="${userinput#*exploit=}"
    if [ -z "$exploit_name" ]; then
      echo "[-] specify exploit name."
    else
      write_config "$target_config" "$exploit_name"
      echo "[+] set $target_config to '$exploit_name'"
      echo "[+] changing .gitignore target for logging..."
      add_git_target "$exploit_name".c
    fi
    ;;
  rootfs=*)
    local target_config="ROOTFS"
    local rootfs_name="${userinput#*rootfs=}"
    if [ -z "$rootfs_name" ]; then
      echo "[-] specify rootfs name."
    else
      write_config "$target_config" "$rootfs_name"
      echo "[+] set $target_config to '$rootfs_name'"
    fi
    ;;
  qemu=*)
    local target_config="QEMUSCRIPT"
    local rootfs_name="${userinput#*qemu=}"
    if [ -z "$rootfs_name" ]; then
      echo "[-] specify rootfs name."
    else
      write_config "$target_config" "$rootfs_name"
      echo "[+] set $target_config to '$rootfs_name'"
    fi
    ;;
  include=*)
    local target_config="INCLUDE"
    local includes="${userinput#*include=}"
    write_config "$target_config" "$includes"
    echo "[+] set $target_config to '$includes'"
    ;;
  "assets add "*)
    local target_config="CUSTOM_ASSETS"
    local assets="${userinput#*"assets add "}"
    local filename path_to_copy
    if [[ "$assets" == *":"* ]]; then
      filename=$(cut -d ':' -f 1 <<<$assets)
      path_to_copy=$(cut -d ':' -f 2 <<<$assets)
    else
      filename="$assets"
      path_to_copy="/"
    fi

    read_config "CUSTOM_ASSETS"
    if [ -z "$CUSTOM_ASSETS" ]; then
      write_config "$target_config" "$filename:$path_to_copy"
    else
      write_config "$target_config" "$CUSTOM_ASSETS $filename:$path_to_copy"
    fi
    read_config "CUSTOM_ASSETS"
    echo "[+] set $target_config to '$CUSTOM_ASSETS'"
    ;;
  q)
    exit 0
    ;;
  *)
    printf "Unknown command: %s\n" "$userinput"
    ;;
  esac
}

function configure_interactive() {
  if ! [ -f "$CONFIGFILE" ]; then
    _error_exit "$FILE_NOT_FOUND" "config file '%s' not found: do 'lysithea init' first." $CONFIGFILE
  fi
  echo "[+] Currenct configurations:"
  cat "$CONFIGFILE"

  echo ""
  while :; do
    _do_configure_interactive
  done
}
